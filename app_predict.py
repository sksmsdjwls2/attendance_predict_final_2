# -*- coding: utf-8 -*-
"""app_predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eNN_CN6RcFfsdguZsfS-HAB69kPr67YS
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import os
import plotly.express as px
import sys
from gtts import gTTS
import io
import numpy as np
from sklearn.ensemble import RandomForestClassifier

class AttendanceSystem:
    def __init__(self):
        self.data_file = 'attendance_data.xlsx'
        self.members_file = 'members_list.txt'
        self.departments = ['락킹', '왁킹', '힙합', '걸스힙합', '하우스', '브레이킹']
        self.initialize_data_file()
        self.initialize_members_file()

    def initialize_data_file(self):
        if not os.path.exists(self.data_file):
            df = pd.DataFrame(columns=['날짜', '이름', '부서', '출석상태', '비고', '프리패스권_사용'])
            df.to_excel(self.data_file, index=False)
        else:
            # 기존 파일에 프리패스권_사용 컬럼이 없으면 추가
            df = pd.read_excel(self.data_file)
            if '프리패스권_사용' not in df.columns:
                df['프리패스권_사용'] = False
                df.to_excel(self.data_file, index=False)

    def initialize_members_file(self):
        if not os.path.exists(self.members_file):
            with open(self.members_file, 'w', encoding='utf-8') as f:
                f.write("")

    def get_members_list(self):
        try:
            with open(self.members_file, 'r', encoding='utf-8') as f:
                members = {}
                for line in f:
                    if line.strip():
                        parts = line.strip().split(',')
                        if len(parts) >= 2:
                            name = parts[0].strip()
                            dept = parts[1].strip()
                            # 프리패스권 개수 (기본값 3)
                            free_pass = int(parts[2].strip()) if len(parts) > 2 else 3
                            members[name] = {'부서': dept, '프리패스권': free_pass}
            return members
        except FileNotFoundError:
            return {}

    def add_member(self, name, department):
        if department not in self.departments:
            return False, "존재하지 않는 부서입니다."

        members = self.get_members_list()
        if name not in members:
            with open(self.members_file, 'a', encoding='utf-8') as f:
                f.write(f"{name},{department},3\n")  # 기본 프리패스권 3개
            return True, f"{name}님이 {department} 부서에 추가되었습니다. (프리패스권 3개 지급)"
        return False, f"{name}님은 이미 동아리원 목록에 있습니다."

    def remove_member(self, name):
        members = self.get_members_list()
        if name in members:
            del members[name]
            with open(self.members_file, 'w', encoding='utf-8') as f:
                for name, info in members.items():
                    f.write(f"{name},{info['부서']},{info['프리패스권']}\n")
            return True
        return False

    def get_free_pass_count(self, name):
        """멤버의 프리패스권 잔여 개수 조회"""
        members = self.get_members_list()
        if name in members:
            return members[name]['프리패스권']
        return 0

    def use_free_pass(self, name, date):
        """프리패스권 사용"""
        members = self.get_members_list()
        if name not in members:
            return False, f"{name}님은 동아리원 목록에 없습니다."

        if members[name]['프리패스권'] <= 0:
            return False, f"{name}님의 프리패스권이 모두 소진되었습니다. (최대 3회)"

        # 출석 기록에서 해당 날짜의 지각/결석을 출석으로 변경
        df = pd.read_excel(self.data_file)
        mask = (df['날짜'] == date) & (df['이름'] == name)

        if not any(mask):
            return False, f"{date}에 {name}님의 출석 기록이 없습니다."

        current_status = df.loc[mask, '출석상태'].iloc[0]
        if current_status == '출석':
            return False, f"{name}님은 이미 {date}에 출석 처리되어 있습니다."

        # 프리패스권 사용
        df.loc[mask, '출석상태'] = '출석'
        df.loc[mask, '프리패스권_사용'] = True
        df.to_excel(self.data_file, index=False)

        # 프리패스권 개수 차감
        members[name]['프리패스권'] -= 1
        with open(self.members_file, 'w', encoding='utf-8') as f:
            for member_name, info in members.items():
                f.write(f"{member_name},{info['부서']},{info['프리패스권']}\n")

        return True, f"{name}님의 {date} {current_status}이(가) 프리패스권으로 출석 처리되었습니다. (잔여: {members[name]['프리패스권']}개)"

    def get_free_pass_usage_summary(self, name=None, department=None):
        """프리패스권 사용 현황 조회"""
        df = pd.read_excel(self.data_file)
        members = self.get_members_list()

        if name:
            if name not in members:
                return None, f"{name}님은 동아리원 목록에 없습니다."

            # 해당 멤버의 프리패스권 사용 기록
            member_df = df[(df['이름'] == name) & (df['프리패스권_사용'] == True)]
            used_count = len(member_df)
            remaining_count = members[name]['프리패스권']

            return {
                '이름': name,
                '부서': members[name]['부서'],
                '사용한_프리패스권': used_count,
                '잔여_프리패스권': remaining_count,
                '사용_내역': member_df[['날짜', '출석상태']].to_dict('records') if len(member_df) > 0 else []
            }, None

        elif department:
            if department not in self.departments:
                return None, f"존재하지 않는 부서입니다."

            summary = []
            for member_name, info in members.items():
                if info['부서'] == department:
                    member_df = df[(df['이름'] == member_name) & (df['프리패스권_사용'] == True)]
                    used_count = len(member_df)
                    remaining_count = info['프리패스권']

                    summary.append({
                        '이름': member_name,
                        '사용한_프리패스권': used_count,
                        '잔여_프리패스권': remaining_count
                    })

            return summary, None

        else:
            # 전체 조회
            summary = []
            for member_name, info in members.items():
                member_df = df[(df['이름'] == member_name) & (df['프리패스권_사용'] == True)]
                used_count = len(member_df)
                remaining_count = info['프리패스권']

                summary.append({
                    '이름': member_name,
                    '부서': info['부서'],
                    '사용한_프리패스권': used_count,
                    '잔여_프리패스권': remaining_count
                })

            return summary, None

    def check_attendance(self, names, status='출석', date=None):
        if date is None:
            date = datetime.now().strftime('%Y-%m-%d')

        df = pd.read_excel(self.data_file)

        name_list = [name.strip() for name in names.replace(',', ' ').split() if name.strip()]

        if not name_list:
            return "입력된 이름이 없습니다."

        valid_members = self.get_members_list()
        results = []
        invalid_names = []

        for name in name_list:
            if name not in valid_members:
                invalid_names.append(name)

        if invalid_names:
            return f"다음 이름은 동아리원 목록에 없습니다: {', '.join(invalid_names)}"

        for name in name_list:
            if len(df[(df['날짜'] == date) & (df['이름'] == name)]) > 0:
                results.append(f"{name}님은 이미 {date} 출석 기록이 있습니다.")
                continue

            new_record = pd.DataFrame({
                '날짜': [date],
                '이름': [name],
                '부서': [valid_members[name]['부서']],
                '출석상태': [status],
                '비고': [''],
                '프리패스권_사용': [False]
            })

            df = pd.concat([df, new_record], ignore_index=True)
            results.append(f"{name}님의 출석이 기록되었습니다. (날짜: {date}, 상태: {status})")

        df.to_excel(self.data_file, index=False)
        return "\n".join(results)

    def get_attendance_summary(self, name=None, department=None):
        df = pd.read_excel(self.data_file)
        members = self.get_members_list()
        all_dates = set(df['날짜'].unique())
        if name:
            if name not in members:
                return None, f"{name}님은 동아리원 목록에 없습니다."
            member_df = df[df['이름'] == name]
            total_days = len(all_dates)
            attendance_count = len(member_df[member_df['출석상태'] == '출석'])
            late_count = len(member_df[member_df['출석상태'] == '지각'])
            # 결석: 전체 날짜 - 출석 - 지각
            absent_count = total_days - attendance_count - late_count
            attendance_rate = (attendance_count / total_days) * 100 if total_days > 0 else 0
            summary = {
                '이름': name,
                '부서': members[name]['부서'],
                '총_활동일수': total_days,
                '출석': attendance_count,
                '지각': late_count,
                '결석': absent_count,
                '출석률': attendance_rate
            }
            return summary, None
        elif department:
            if department not in self.departments:
                return None, f"존재하지 않는 부서입니다."
            dept_members = [m for m, d in members.items() if d == department]
            summary = []
            total_days = len(all_dates)
            for dept_member in dept_members:
                member_df = df[df['이름'] == dept_member]
                attendance_count = len(member_df[member_df['출석상태'] == '출석'])
                late_count = len(member_df[member_df['출석상태'] == '지각'])
                absent_count = total_days - attendance_count - late_count
                attendance_rate = (attendance_count / total_days) * 100 if total_days > 0 else 0
                summary.append({
                    '이름': dept_member,
                    '출석': attendance_count,
                    '지각': late_count,
                    '결석': absent_count,
                    '출석률': attendance_rate
                })
            return summary, None
        else:
            # 전체 조회
            summary = []
            for member_name, info in members.items():
                member_df = df[(df['이름'] == member_name) & (df['프리패스권_사용'] == True)]
                used_count = len(member_df)
                remaining_count = info['프리패스권']

                summary.append({
                    '이름': member_name,
                    '부서': info['부서'],
                    '사용한_프리패스권': used_count,
                    '잔여_프리패스권': remaining_count
                })

            return summary, None

    def get_total_statistics(self):
        df = pd.read_excel(self.data_file)
        members = self.get_members_list()

        if len(df) == 0:
            return None, "출석 기록이 없습니다."

        # 전체 통계
        total_attendance = len(df[df['출석상태'] == '출석'])
        total_late = len(df[df['출석상태'] == '지각'])
        total_absent = len(df[df['출석상태'] == '결석'])

        # 부서별 통계
        dept_stats = {}
        for dept in self.departments:
            dept_df = df[df['부서'] == dept]
            dept_stats[dept] = {
                '출석': len(dept_df[dept_df['출석상태'] == '출석']),
                '지각': len(dept_df[dept_df['출석상태'] == '지각']),
                '결석': len(dept_df[dept_df['출석상태'] == '결석'])
            }

        # 날짜별 통계
        date_stats = df.groupby('날짜')['출석상태'].value_counts().unstack(fill_value=0)

        return {
            '전체': {
                '출석': total_attendance,
                '지각': total_late,
                '결석': total_absent
            },
            '부서별': dept_stats,
            '날짜별': date_stats
        }, None

    def view_attendance(self, date=None):
        df = pd.read_excel(self.data_file)

        if date:
            df = df[df['날짜'] == date]

        return df

    def get_practice_count(self, start_date=None, end_date=None):
        df = pd.read_excel(self.data_file)

        if start_date and end_date:
            df = df[(df['날짜'] >= start_date) & (df['날짜'] <= end_date)]

        # 날짜별 출석 인원 수 계산
        daily_count = df.groupby('날짜').size().reset_index(name='출석인원')

        # 부서별 출석 인원 수 계산
        dept_count = df.groupby(['날짜', '부서']).size().reset_index(name='출석인원')

        return daily_count, dept_count

    def modify_attendance(self, date, name, new_status):
        df = pd.read_excel(self.data_file)

        # 해당 날짜와 이름에 해당하는 기록 찾기
        mask = (df['날짜'] == date) & (df['이름'] == name)
        if not any(mask):
            return False, f"{date}에 {name}님의 출석 기록이 없습니다."

        # 출석 상태 수정
        df.loc[mask, '출석상태'] = new_status
        df.to_excel(self.data_file, index=False)
        return True, f"{name}님의 {date} 출석 상태가 {new_status}로 수정되었습니다."

    def get_summary_until_date(self, until_date, department=None):
        df = pd.read_excel(self.data_file)
        members = self.get_members_list()

        # 날짜 필터링
        df = df[df['날짜'] <= until_date]

        if department:
            df = df[df['부서'] == department]
            filtered_members = [m for m, d in members.items() if d == department]
        else:
            filtered_members = list(members.keys())

        summary = []
        for name in filtered_members:
            member_df = df[df['이름'] == name]
            if len(member_df) > 0:
                attendance_count = len(member_df[member_df['출석상태'] == '출석'])
                late_count = len(member_df[member_df['출석상태'] == '지각'])
                absent_count = len(member_df[member_df['출석상태'] == '결석'])
                summary.append({
                    '이름': name,
                    '부서': members[name]['부서'],
                    '출석': attendance_count,
                    '지각': late_count,
                    '결석': absent_count
                })
        return summary

    def get_attendance_summary_with_total_practices(self, total_practices, name=None, department=None):
        """
        총 연습횟수를 입력받아 결석을 자동으로 계산하는 함수
        결석 = 총연습횟수 - (지각횟수 + 출석횟수)
        지각비: 1회 1,000원, 결석비: 1회 5,000원
        출석 기록이 없는 멤버는 결석으로 처리
        """
        df = pd.read_excel(self.data_file)
        members = self.get_members_list()

        if name:
            if name not in members:
                return None, f"{name}님은 동아리원 목록에 없습니다."
            df = df[df['이름'] == name]
        elif department:
            if department not in self.departments:
                return None, f"존재하지 않는 부서입니다."
            df = df[df['부서'] == department]

        if name:
            # 개인별 조회
            attendance_count = len(df[df['출석상태'] == '출석'])
            late_count = len(df[df['출석상태'] == '지각'])
            absent_count = total_practices - (attendance_count + late_count)
            if absent_count < 0:
                absent_count = 0
            attendance_rate = (attendance_count / total_practices) * 100 if total_practices > 0 else 0
            late_fee = late_count * 1000
            absent_fee = absent_count * 5000
            summary = {
                '이름': name,
                '부서': members[name]['부서'],
                '총_연습횟수': total_practices,
                '출석': attendance_count,
                '지각': late_count,
                '결석': absent_count,
                '출석률': attendance_rate,
                '지각비': late_fee,
                '결석비': absent_fee
            }
            if late_count + absent_count >= 3:
                play_warning_video()
            elif attendance_count == total_practices and total_practices > 0:
                play_good_video()
            return summary, None
        else:
            # 부서별 조회
            summary = []
            for dept_member in [m for m, d in members.items() if d['부서'] == department]:
                member_df = df[df['이름'] == dept_member]
                attendance_count = len(member_df[member_df['출석상태'] == '출석'])
                late_count = len(member_df[member_df['출석상태'] == '지각'])
                absent_count = total_practices - (attendance_count + late_count)
                if absent_count < 0:
                    absent_count = 0
                attendance_rate = (attendance_count / total_practices) * 100 if total_practices > 0 else 0
                late_fee = late_count * 1000
                absent_fee = absent_count * 5000
                summary.append({
                    '이름': dept_member,
                    '총_연습횟수': total_practices,
                    '출석': attendance_count,
                    '지각': late_count,
                    '결석': absent_count,
                    '출석률': attendance_rate,
                    '지각비': late_fee,
                    '결석비': absent_fee
                })
                if late_count + absent_count >= 3:
                    play_warning_video()
                elif attendance_count == total_practices and total_practices > 0:
                    play_good_video()
            return summary, None

    def get_daily_attendance_status(self, date=None):
        """
        날짜별로 모든 멤버의 출석 상태를 표시하는 함수
        출석 기록이 없는 멤버는 결석으로 처리
        """
        df = pd.read_excel(self.data_file)
        members = self.get_members_list()

        if date:
            df = df[df['날짜'] == date]

        # 모든 멤버에 대해 출석 상태 확인
        daily_status = []
        for name, info in members.items():
            member_record = df[df['이름'] == name]
            if len(member_record) > 0:
                status = member_record['출석상태'].iloc[0]
            else:
                # 출석 기록이 없는 멤버는 결석으로 처리
                status = '결석'

            daily_status.append({
                '이름': name,
                '부서': info['부서'],
                '출석상태': status
            })

        return daily_status

def play_warning_video():
    st.video("발광+출결+angry.mp4")

def play_good_video():
    st.video("발광+출결+good.mp4")

def prepare_ml_data(df, recent_n=5):
    members = df['이름'].unique()
    X, y, names = [], [], []
    for member in members:
        member_df = df[df['이름'] == member].sort_values('날짜')
        for i in range(recent_n, len(member_df)-1):
            recent = member_df.iloc[i-recent_n:i]
            features = [
                (recent['출석상태'] == '출석').sum(),
                (recent['출석상태'] == '지각').sum(),
                (recent['출석상태'] == '결석').sum(),
            ]
            X.append(features)
            next_status = member_df.iloc[i+1]['출석상태']
            y.append(1 if next_status == '출석' else 0)
            names.append(member)
    return np.array(X), np.array(y), names

def predict_next_attendance(data_file, recent_n=5):
    df = pd.read_excel(data_file)
    X, y, names = prepare_ml_data(df, recent_n)
    rf_preds = {}
    if len(X) > 0:
        rf = RandomForestClassifier()
        rf.fit(X, y)
        for member in df['이름'].unique():
            member_df = df[df['이름'] == member].sort_values('날짜')
            if len(member_df) < recent_n:
                continue
            recent = member_df.iloc[-recent_n:]
            features = [
                (recent['출석상태'] == '출석').sum(),
                (recent['출석상태'] == '지각').sum(),
                (recent['출석상태'] == '결석').sum(),
            ]
            prob = rf.predict_proba([features])[0][1]
            rf_preds[member] = prob
    return rf_preds

def cli_main():
    system = AttendanceSystem()
    while True:
        print("\n=== 동아리 출결 관리 시스템 ===")
        print("1. 출석 체크")
        print("2. 출석 현황 조회")
        print("3. 날짜별 출석 조회")
        print("4. 동아리원 관리")
        print("5. 날짜별 출석 상태 조회")
        print("6. 총 연습횟수 기반 통계")
        print("7. 프리패스권 관리")
        print("8. 종료")
        print("9. 출결현황 csv로 저장")
        choice = input("\n원하는 작업을 선택하세요 (1-9): ")
        if choice == '1':
            print("\n이름을 입력하세요 (쉼표나 공백으로 구분):")
            print("예시: 홍길동, 김철수 이영희")
            names = input("> ")
            print("\n출석 상태를 선택하세요:")
            print("1. 출석")
            print("2. 지각")
            print("3. 결석")
            status_choice = input("선택 (1-3): ")
            status_map = {'1': '출석', '2': '지각', '3': '결석'}
            status = status_map.get(status_choice, '출석')
            result = system.check_attendance(names, status)
            print(result)
        elif choice == '2':
            print("\n1. 이름으로 조회  2. 부서로 조회")
            sub_choice = input("선택 (1-2): ")
            if sub_choice == '1':
                name = input("이름 입력: ")
                summary, error = system.get_attendance_summary(name=name)
                if error:
                    print(error)
                else:
                    print(summary)
                    if summary['지각'] + summary['결석'] >= 3:
                        play_warning_video()
            else:
                dept = input("부서 입력: ")
                summary, error = system.get_attendance_summary(department=dept)
                if error:
                    print(error)
                else:
                    print(summary)
        elif choice == '3':
            date = input("조회할 날짜 (YYYY-MM-DD): ")
            df = system.view_attendance(date)
            if len(df) > 0:
                print(df)
            else:
                print("해당 날짜의 출석 기록이 없습니다.")
        elif choice == '4':
            print("1. 동아리원 추가  2. 동아리원 삭제  3. 동아리원 목록")
            sub_choice = input("선택 (1-3): ")
            if sub_choice == '1':
                name = input("이름: ")
                dept = input("부서: ")
                success, msg = system.add_member(name, dept)
                print(msg)
            elif sub_choice == '2':
                name = input("삭제할 이름: ")
                if system.remove_member(name):
                    print(f"{name}님이 삭제되었습니다.")
                else:
                    print(f"{name}님은 목록에 없습니다.")
            else:
                members = system.get_members_list()
                for name, info in members.items():
                    print(f"{name} ({info['부서']}) - 프리패스권 {info['프리패스권']}개")
        elif choice == '5':
            date = input("조회할 날짜 (YYYY-MM-DD): ")
            daily_status = system.get_daily_attendance_status(date)
            if daily_status:
                print(f"\n=== {date} 출석 상태 ===")
                for status in daily_status:
                    print(f"{status['이름']} ({status['부서']}): {status['출석상태']}")
            else:
                print("해당 날짜의 출석 상태 기록이 없습니다.")
        elif choice == '6':
            try:
                total_practices = int(input("총 연습횟수를 입력하세요: "))
                print("\n1. 개인별 조회  2. 부서별 조회")
                sub_choice = input("선택 (1-2): ")
                if sub_choice == '1':
                    name = input("이름 입력: ")
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_attendance_summary_with_total_practices(total_practices, name=name)
                    if error:
                        print(error)
                    else:
                        print(f"\n=== {name}님의 출석 현황 (총 연습횟수: {total_practices}회) ===")
                        print(f"부서: {summary['부서']}")
                        print(f"출석: {summary['출석']}회")
                        print(f"지각: {summary['지각']}회")
                        print(f"결석: {summary['결석']}회")
                        print(f"출석률: {summary['출석률']:.1f}%")
                        print(f"지각비: {summary['지각비']:,}원")
                        print(f"결석비: {summary['결석비']:,}원")
                        if summary['지각'] + summary['결석'] >= 3:
                            play_warning_video()
                            if summary['출석'] == total_practices and total_practices > 0:
                                play_good_video()
                else:
                    dept = input("부서 입력: ")
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_attendance_summary_with_total_practices(total_practices, department=dept)
                    if error:
                        print(error)
                    else:
                        print(f"\n=== {dept} 부서 출석 현황 (총 연습횟수: {total_practices}회) ===")
                        total_late_fee = 0
                        total_absent_fee = 0
                        for member in summary:
                            print(f"{member['이름']}: 출석 {member['출석']}회, 지각 {member['지각']}회, 결석 {member['결석']}회, 출석률 {member['출석률']:.1f}%, 지각비 {member['지각비']:,}원, 결석비 {member['결석비']:,}원")
                            total_late_fee += member['지각비']
                            total_absent_fee += member['결석비']
                        print(f"총 지각비: {total_late_fee:,}원 / 총 결석비: {total_absent_fee:,}원")
            except ValueError:
                print("올바른 숫자를 입력해주세요.")
        elif choice == '7':
            print("\n=== 프리패스권 관리 ===")
            print("1. 프리패스권 사용 현황 조회")
            print("2. 프리패스권 사용")
            sub_choice = input("선택 (1-2): ")
            if sub_choice == '1':
                print("\n1. 개인별 조회  2. 부서별 조회  3. 전체 조회")
                view_choice = input("선택 (1-3): ")
                if view_choice == '1':
                    name = input("이름 입력: ")
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_free_pass_usage_summary(name=name)
                    if error:
                        print(error)
                    else:
                        print(f"\n=== {summary['이름']}님의 프리패스권 현황 ===")
                        print(f"부서: {summary['부서']}")
                        print(f"사용한 프리패스권: {summary['사용한_프리패스권']}회")
                        print(f"잔여 프리패스권: {summary['잔여_프리패스권']}회")
                        if summary['사용_내역']:
                            print("사용 내역:")
                            for record in summary['사용_내역']:
                                print(f"  - {record['날짜']}: {record['출석상태']}")
                elif view_choice == '2':
                    dept = input("부서 입력: ")
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_free_pass_usage_summary(department=dept)
                    if error:
                        print(error)
                    else:
                        print(f"\n=== {dept} 부서 프리패스권 현황 ===")
                        if not summary:
                            print("해당 부서의 출석 데이터가 없습니다.")
                        else:
                            df = pd.DataFrame(summary)
                            print(df)
                            if not df.empty:
                                fig = px.bar(df, x='이름', y='출석률', title=f'{dept} 부서 출석률')
                                print(fig)
                                for row in summary:
                                    if row['지각'] + row['결석'] >= 3:
                                        play_warning_video()
                            else:
                                print("해당 부서의 출석 데이터가 없습니다.")
                else:
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_free_pass_usage_summary()
                    if error:
                        print(error)
                    else:
                        print("\n=== 전체 프리패스권 현황 ===")
                        for member in summary:
                            print(f"{member['이름']} ({member['부서']}): 사용 {member['사용한_프리패스권']}회, 잔여 {member['잔여_프리패스권']}회")
            elif sub_choice == '2':
                date = input("프리패스권을 사용할 날짜 (YYYY-MM-DD): ")
                name = input("프리패스권을 사용할 멤버 이름: ")
                success, message = system.use_free_pass(name, date)
                if success:
                    print(f"✅ {message}")
                else:
                    print(f"❌ {message}")
        elif choice == '8':
            print("프로그램을 종료합니다.")
            break
        elif choice == '9':
            msg = system.get_total_statistics()
            print(msg)
        else:
            print("잘못된 입력입니다.")

def streamlit_main():
    st.set_page_config(page_title="동아리 출결 관리 시스템", layout="wide")

    st.title("동아리 출결 관리 시스템")

    system = AttendanceSystem()

    # 사이드바 메뉴
    menu = st.sidebar.selectbox(
        "메뉴 선택",
        ["출석 체크", "출석 현황 조회", "날짜별 출석 조회", "연습 진행 현황", "동아리원 관리", "출석 기록 수정", "날짜별 출석 상태", "총 연습횟수 기반 통계", "프리패스권 관리"]
    )

    if menu == "출석 체크":
        st.header("출석 체크")

        # 날짜 선택
        selected_date = st.date_input(
            "출석 날짜를 선택하세요",
            value=datetime.now(),
            format="YYYY-MM-DD"
        )

        # 이름 입력
        names = st.text_input("이름을 입력하세요 (쉼표나 공백으로 구분)",
                            help="예시: 홍길동, 김철수 이영희")

        # 출석 상태 선택
        status = st.radio("출석 상태를 선택하세요", ["출석", "지각", "결석"])

        if st.button("출석 체크"):
            if names:
                result = system.check_attendance(
                    names,
                    status,
                    selected_date.strftime('%Y-%m-%d')
                )
                st.write(result)
            else:
                st.warning("이름을 입력해주세요.")

    elif menu == "출석 현황 조회":
        st.header("출석 현황 조회")

        # 조회 방식 선택
        view_type = st.radio("조회 방식을 선택하세요", ["전체 통계", "개인별 조회", "부서별 조회", "최종 연습 일자별 통계"])

        if view_type == "전체 통계":
            if st.button("통계 조회"):
                stats, error = system.get_total_statistics()
                if error:
                    st.error(error)
                else:
                    # 전체 통계
                    st.subheader("전체 출석 통계")
                    total_stats = stats['전체']

                    # 전체 통계 차트
                    total_data = {
                        '상태': ['출석', '지각', '결석'],
                        '횟수': [total_stats['출석'], total_stats['지각'], total_stats['결석']]
                    }
                    df_total = pd.DataFrame(total_data)
                    fig = px.pie(df_total, values='횟수', names='상태',
                               title='전체 출석 현황')
                    st.plotly_chart(fig)

                    # 부서별 통계
                    st.subheader("부서별 출석 통계")
                    dept_stats = stats['부서별']

                    # 부서별 통계 테이블
                    dept_data = []
                    for dept, stat in dept_stats.items():
                        dept_data.append({
                            '부서': dept,
                            '출석': stat['출석'],
                            '지각': stat['지각'],
                            '결석': stat['결석']
                        })
                    df_dept = pd.DataFrame(dept_data)
                    st.dataframe(df_dept)

                    # 부서별 통계 차트
                    fig = px.bar(df_dept, x='부서', y=['출석', '지각', '결석'],
                               title='부서별 출석 현황',
                               barmode='group')
                    st.plotly_chart(fig)

                    # 날짜별 통계
                    st.subheader("날짜별 출석 통계")
                    date_stats = stats['날짜별']
                    st.dataframe(date_stats)

                    # 날짜별 통계 차트
                    fig = px.line(date_stats, title='날짜별 출석 현황')
                    st.plotly_chart(fig)

        elif view_type == "개인별 조회":
            name = st.text_input("이름을 입력하세요")
            total_practices = st.number_input("최종 연습 횟수를 입력하세요", min_value=0, step=1)
            if st.button("조회"):
                summary, error = system.get_attendance_summary(name=name)
                if error:
                    st.error(error)
                else:
                    attendance = summary['출석']
                    late = summary['지각']
                    absent = max(total_practices - attendance - late, 0)
                    st.subheader(f"{summary['이름']}님의 출석 현황")
                    st.write(f"부서: {summary['부서']}")
                    st.write(f"총 연습 횟수: {total_practices}회")
                    st.write(f"출석: {attendance}회, 지각: {late}회, 결석: {absent}회")
                    attendance_data = {
                        '상태': ['출석', '지각', '결석'],
                        '횟수': [attendance, late, absent]
                    }
                    df = pd.DataFrame(attendance_data)
                    fig = px.pie(df, values='횟수', names='상태', title='출석 현황')
                    st.plotly_chart(fig)
                    if late + absent >= 3:
                        play_warning_video()
                    elif attendance == total_practices and total_practices > 0:
                        play_good_video()

        elif view_type == "부서별 조회":
            department = st.selectbox("부서를 선택하세요", system.departments)
            total_practices = st.number_input("최종 연습 횟수를 입력하세요", min_value=0, step=1, key="dept_total_practices")
            if st.button("조회"):
                summary, error = system.get_attendance_summary(department=department)
                if error:
                    st.error(error)
                else:
                    st.subheader(f"{department} 부서 출석 현황")
                    # 부서별 출석 현황 테이블
                    for row in summary:
                        attendance = row['출석']
                        late = row['지각']
                        absent = max(total_practices - attendance - late, 0)
                        row['결석'] = absent
                        row['출석률'] = (attendance / total_practices * 100) if total_practices > 0 else 0
                    df = pd.DataFrame(summary)
                    st.dataframe(df)
                    if not df.empty:
                        fig = px.bar(df, x='이름', y='출석률', title=f'{department} 부서 출석률')
                        st.plotly_chart(fig)
                        for row in summary:
                            if row['지각'] + row['결석'] >= 3:
                                play_warning_video()
                    else:
                        st.info("해당 부서의 출석 데이터가 없습니다.")

        elif view_type == "최종 연습 일자별 통계":
            until_date = st.date_input("최종 연습 일자를 선택하세요", value=datetime.now(), format="YYYY-MM-DD")
            dept_option = st.selectbox("부서(전체는 선택 안함)", ["전체"] + system.departments)
            if st.button("통계 조회"):
                if dept_option == "전체":
                    summary = system.get_summary_until_date(until_date.strftime('%Y-%m-%d'))
                else:
                    summary = system.get_summary_until_date(until_date.strftime('%Y-%m-%d'), department=dept_option)
                if summary:
                    df = pd.DataFrame(summary)
                    st.dataframe(df)
                    fig = px.bar(df, x='이름', y=['출석', '지각', '결석'], barmode='group', title='최종 연습 일자별 출석 통계')
                    st.plotly_chart(fig)
                    # 각 동아리원별로 경고 조건 체크
                    for row in summary:
                        if row.get('지각', 0) + row.get('결석', 0) >= 3:
                            st.warning(f"{row['이름']}님: 지각+결석 3회 이상! 경고")
                            play_warning_video()
                else:
                    st.info("해당 기간에 출석 기록이 없습니다.")

    elif menu == "날짜별 출석 조회":
        st.header("날짜별 출석 조회")

        date = st.date_input("조회할 날짜를 선택하세요")
        if st.button("조회"):
            df = system.view_attendance(date.strftime('%Y-%m-%d'))
            if len(df) > 0:
                st.dataframe(df)

                # 부서별 출석 현황
                st.subheader("부서별 출석 현황")
                dept_summary = df.groupby('부서').size().reset_index(name='출석인원')
                fig = px.pie(dept_summary, values='출석인원', names='부서',
                           title='부서별 출석 인원')
                st.plotly_chart(fig)
            else:
                st.info("해당 날짜의 출석 기록이 없습니다.")

    elif menu == "연습 진행 현황":
        st.header("연습 진행 현황")

        col1, col2 = st.columns(2)

        with col1:
            start_date = st.date_input("시작 날짜")
        with col2:
            end_date = st.date_input("종료 날짜")

        if st.button("조회"):
            daily_count, dept_count = system.get_practice_count(
                start_date.strftime('%Y-%m-%d'),
                end_date.strftime('%Y-%m-%d')
            )

            if len(daily_count) > 0:
                # 전체 출석 인원 추이
                st.subheader("전체 출석 인원 추이")
                fig = px.line(daily_count, x='날짜', y='출석인원',
                            title='날짜별 출석 인원 추이')
                st.plotly_chart(fig)

                # 부서별 출석 인원 추이
                st.subheader("부서별 출석 인원 추이")
                fig = px.line(dept_count, x='날짜', y='출석인원', color='부서',
                            title='부서별 출석 인원 추이')
                st.plotly_chart(fig)

                # 통계 정보
                st.subheader("통계 정보")
                total_practices = len(daily_count)
                total_attendance = daily_count['출석인원'].sum()
                avg_attendance = total_attendance / total_practices if total_practices > 0 else 0

                st.write(f"총 연습 횟수: {total_practices}회")
                st.write(f"총 출석 인원: {total_attendance}명")
                st.write(f"평균 출석 인원: {avg_attendance:.1f}명")
            else:
                st.info("선택한 기간의 출석 기록이 없습니다.")

    elif menu == "동아리원 관리":
        st.header("동아리원 관리")

        submenu = st.radio("관리 메뉴 선택", ["동아리원 목록", "동아리원 추가", "동아리원 삭제"])

        if submenu == "동아리원 목록":
            members = system.get_members_list()
            if members:
                for dept in system.departments:
                    st.subheader(f"[{dept}]")
                    dept_members = [name for name, d in members.items() if d == dept]
                    if dept_members:
                        for member in dept_members:
                            st.write(f"- {member}")
                    else:
                        st.write("- 없음")
            else:
                st.info("등록된 동아리원이 없습니다.")

        elif submenu == "동아리원 추가":
            name = st.text_input("추가할 동아리원 이름")
            department = st.selectbox("부서 선택", system.departments)

            if st.button("추가"):
                if name:
                    success, message = system.add_member(name, department)
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
                else:
                    st.warning("이름을 입력해주세요.")

        else:  # 동아리원 삭제
            members = system.get_members_list()
            if members:
                name = st.selectbox("삭제할 동아리원 선택", list(members.keys()))
                if st.button("삭제"):
                    if system.remove_member(name):
                        st.success(f"{name}님이 동아리원 목록에서 삭제되었습니다.")
                    else:
                        st.error(f"{name}님은 동아리원 목록에 없습니다.")
            else:
                st.info("등록된 동아리원이 없습니다.")

    elif menu == "출석 기록 수정":
        st.header("출석 기록 수정")

        # 날짜 선택
        selected_date = st.date_input(
            "수정할 출석 날짜를 선택하세요",
            value=datetime.now(),
            format="YYYY-MM-DD"
        )

        # 해당 날짜의 출석 기록 가져오기
        df = system.view_attendance(selected_date.strftime('%Y-%m-%d'))

        if len(df) > 0:
            # 이름 선택
            name = st.selectbox(
                "수정할 동아리원을 선택하세요",
                options=df['이름'].unique()
            )

            # 현재 출석 상태 표시
            current_status = df[df['이름'] == name]['출석상태'].iloc[0]
            st.write(f"현재 출석 상태: {current_status}")

            # 새로운 출석 상태 선택
            new_status = st.radio(
                "새로운 출석 상태를 선택하세요",
                ["출석", "지각", "결석"]
            )

            if st.button("출석 상태 수정"):
                success, message = system.modify_attendance(
                    selected_date.strftime('%Y-%m-%d'),
                    name,
                    new_status
                )
                if success:
                    st.success(message)
                else:
                    st.error(message)
        else:
            st.warning(f"{selected_date.strftime('%Y-%m-%d')}에 출석 기록이 없습니다.")

    elif menu == "날짜별 출석 상태":
        st.header("날짜별 출석 상태")

        date = st.date_input("조회할 날짜를 선택하세요")
        if st.button("조회"):
            daily_status = system.get_daily_attendance_status(date.strftime('%Y-%m-%d'))
            if daily_status:
                # 부서별로 그룹화하여 표시
                df_status = pd.DataFrame(daily_status)

                # 전체 상태 표시
                st.subheader("전체 출석 상태")
                st.dataframe(df_status)

                # 부서별 상태 표시
                for dept in system.departments:
                    dept_df = df_status[df_status['부서'] == dept]
                    if len(dept_df) > 0:
                        st.subheader(f"[{dept}] 부서")

                        # 출석 상태별 카운트
                        status_counts = dept_df['출석상태'].value_counts()

                        col1, col2 = st.columns(2)
                        with col1:
                            st.dataframe(dept_df)
                        with col2:
                            # 출석 상태별 파이 차트
                            if len(status_counts) > 0:
                                fig = px.pie(values=status_counts.values, names=status_counts.index,
                                           title=f'{dept} 부서 출석 상태')
                                st.plotly_chart(fig)

                # 전체 통계
                st.subheader("전체 통계")
                total_members = len(df_status)
                attendance_count = len(df_status[df_status['출석상태'] == '출석'])
                late_count = len(df_status[df_status['출석상태'] == '지각'])
                absent_count = len(df_status[df_status['출석상태'] == '결석'])

                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("전체 인원", total_members)
                with col2:
                    st.metric("출석", attendance_count)
                with col3:
                    st.metric("지각", late_count)
                with col4:
                    st.metric("결석", absent_count)
            else:
                st.info("해당 날짜의 출석 상태 기록이 없습니다.")

    elif menu == "총 연습횟수 기반 통계":
        st.header("총 연습횟수 기반 통계")

        total_practices = st.number_input("총 연습횟수를 입력하세요", min_value=0, value=10)

        # 조회 방식 선택
        view_type = st.radio("조회 방식을 선택하세요", ["개인별 조회", "부서별 조회", "전체 조회"])

        if view_type == "개인별 조회":
            name = st.text_input("조회할 이름을 입력하세요")
            if st.button("조회"):
                if name:
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_attendance_summary_with_total_practices(total_practices, name=name)
                    if error:
                        st.error(error)
                    else:
                        st.subheader(f"{summary['이름']}님의 출석 현황")

                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**부서:** {summary['부서']}")
                            st.write(f"**총 연습횟수:** {summary['총_연습횟수']}회")
                            st.write(f"**출석:** {summary['출석']}회")
                            st.write(f"**지각:** {summary['지각']}회")
                            st.write(f"**결석:** {summary['결석']}회")
                            st.write(f"**출석률:** {summary['출석률']:.1f}%")
                            st.write(f"**지각비:** {summary['지각비']:,}원")
                            st.write(f"**결석비:** {summary['결석비']:,}원")

                        with col2:
                            # 출석 현황 차트
                            attendance_data = {
                                '상태': ['출석', '지각', '결석'],
                                '횟수': [summary['출석'], summary['지각'], summary['결석']]
                            }
                            df = pd.DataFrame(attendance_data)
                            fig = px.pie(df, values='횟수', names='상태',
                                       title='출석 현황 (총 연습횟수 기준)')
                            st.plotly_chart(fig)
                            if summary['지각'] + summary['결석'] >= 3:
                                play_warning_video()
                else:
                    st.warning("이름을 입력해주세요.")

        elif view_type == "부서별 조회":
            department = st.selectbox("부서를 선택하세요", system.departments)
            if st.button("조회"):
                total_practices = 0  # 또는 적절한 값으로 초기화
                summary, error = system.get_attendance_summary_with_total_practices(total_practices, department=department)
                if error:
                    st.error(error)
                else:
                    st.subheader(f"{department} 부서 출석 현황 (총 연습횟수: {total_practices}회)")

                    # 부서별 출석 현황 테이블
                    df = pd.DataFrame(summary)
                    st.dataframe(df)

                    # 부서별 출석률 차트
                    if not df.empty:
                        fig = px.bar(df, x='이름', y='출석률',
                                   title=f'{department} 부서 출석률 (총 연습횟수 기준)')
                        st.plotly_chart(fig)
                        for row in summary:
                            if row['지각'] + row['결석'] >= 3:
                                play_warning_video()
                    else:
                        st.info("해당 부서의 출석 데이터가 없습니다.")

        else:  # 전체 조회
            if st.button("전체 조회"):
                all_summaries = []
                for dept in system.departments:
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_attendance_summary_with_total_practices(total_practices, department=dept)
                    if summary:
                        all_summaries.extend(summary)

                if all_summaries:
                    df_all = pd.DataFrame(all_summaries)
                    st.subheader(f"전체 출석 현황 (총 연습횟수: {total_practices}회)")

                    # 전체 테이블
                    st.dataframe(df_all)

                    # 부서별 평균 출석률
                    dept_avg = df_all.groupby('부서')['출석률'].mean().reset_index()
                    fig = px.bar(dept_avg, x='부서', y='출석률',
                               title='부서별 평균 출석률')
                    st.plotly_chart(fig)

                    # 전체 통계
                    total_members = len(df_all)
                    avg_attendance_rate = df_all['출석률'].mean()
                    total_attendance = df_all['출석'].sum()
                    total_late = df_all['지각'].sum()
                    total_absent = df_all['결석'].sum()
                    total_late_fee = df_all['지각비'].sum()
                    total_absent_fee = df_all['결석비'].sum()

                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("전체 인원", total_members)
                    with col2:
                        st.metric("평균 출석률", f"{avg_attendance_rate:.1f}%")
                    with col3:
                        st.metric("총 출석 인원", total_attendance)
                else:
                    st.info("출석 데이터가 없습니다.")

    elif menu == "프리패스권 관리":
        st.header("프리패스권 관리")

        submenu = st.radio("관리 메뉴 선택", ["프리패스권 사용 현황", "프리패스권 사용", "프리패스권 사용 기록"])

        if submenu == "프리패스권 사용 현황":
            view_type = st.radio("조회 방식을 선택하세요", ["개인별 조회", "부서별 조회", "전체 조회"])

            if view_type == "개인별 조회":
                name = st.text_input("조회할 이름을 입력하세요")
                if st.button("조회"):
                    if name:
                        total_practices = 0  # 또는 적절한 값으로 초기화
                        summary, error = system.get_free_pass_usage_summary(name=name)
                        if error:
                            st.error(error)
                        else:
                            st.subheader(f"{summary['이름']}님의 프리패스권 현황")
                            st.write(f"**부서:** {summary['부서']}")
                            st.write(f"**사용한 프리패스권:** {summary['사용한_프리패스권']}회")
                            st.write(f"**잔여 프리패스권:** {summary['잔여_프리패스권']}회")

                            # 프리패스권 사용률 차트
                            if summary['사용한_프리패스권'] > 0 or summary['잔여_프리패스권'] > 0:
                                usage_data = {
                                    '상태': ['사용함', '잔여'],
                                    '개수': [summary['사용한_프리패스권'], summary['잔여_프리패스권']]
                                }
                                df = pd.DataFrame(usage_data)
                                fig = px.pie(df, values='개수', names='상태',
                                           title='프리패스권 사용 현황')
                                st.plotly_chart(fig)
                    else:
                        st.warning("이름을 입력해주세요.")

            elif view_type == "부서별 조회":
                department = st.selectbox("부서를 선택하세요", system.departments)
                if st.button("조회"):
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_free_pass_usage_summary(department=department)
                    if error:
                        st.error(error)
                    else:
                        st.subheader(f"{department} 부서 프리패스권 현황")

                        # 부서별 프리패스권 현황 테이블
                        df = pd.DataFrame(summary)
                        st.dataframe(df)

                        # 부서별 잔여 프리패스권 차트
                        fig = px.bar(df, x='이름', y='잔여_프리패스권',
                                   title=f'{department} 부서 잔여 프리패스권')
                        st.plotly_chart(fig)

                        # 부서별 사용한 프리패스권 차트
                        fig = px.bar(df, x='이름', y='사용한_프리패스권',
                                   title=f'{department} 부서 사용한 프리패스권')
                        st.plotly_chart(fig)

            else:  # 전체 조회
                if st.button("전체 조회"):
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_free_pass_usage_summary()
                    if error:
                        st.error(error)
                    else:
                        st.subheader("전체 프리패스권 현황")

                        # 전체 테이블
                        df = pd.DataFrame(summary)
                        st.dataframe(df)

                        # 부서별 평균 잔여 프리패스권
                        dept_avg = df.groupby('부서')['잔여_프리패스권'].mean().reset_index()
                        fig = px.bar(dept_avg, x='부서', y='잔여_프리패스권',
                                   title='부서별 평균 잔여 프리패스권')
                        st.plotly_chart(fig)

                        # 전체 통계
                        total_members = len(df)
                        total_used = df['사용한_프리패스권'].sum()
                        total_remaining = df['잔여_프리패스권'].sum()

                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("전체 인원", total_members)
                        with col2:
                            st.metric("총 사용한 프리패스권", total_used)
                        with col3:
                            st.metric("총 잔여 프리패스권", total_remaining)
                else:
                    st.info("출석 데이터가 없습니다.")

        elif submenu == "프리패스권 사용":
            st.subheader("프리패스권 사용")

            # 날짜 선택
            selected_date = st.date_input(
                "프리패스권을 사용할 날짜를 선택하세요",
                value=datetime.now(),
                format="YYYY-MM-DD"
            )

            # 해당 날짜의 지각/결석 기록 가져오기
            df = system.view_attendance(selected_date.strftime('%Y-%m-%d'))

            if len(df) > 0:
                # 지각/결석한 멤버만 필터링
                late_absent_df = df[df['출석상태'].isin(['지각', '결석'])]

                if len(late_absent_df) > 0:
                    st.write(f"**{selected_date.strftime('%Y-%m-%d')} 지각/결석 멤버:**")

                    for _, row in late_absent_df.iterrows():
                        name = row['이름']
                        status = row['출석상태']
                        free_pass_count = system.get_free_pass_count(name)

                        col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
                        with col1:
                            st.write(f"{name} ({row['부서']})")
                        with col2:
                            st.write(f"상태: {status}")
                        with col3:
                            st.write(f"잔여: {free_pass_count}개")
                        with col4:
                            if free_pass_count > 0:
                                if st.button(f"프리패스권 사용", key=f"use_{name}"):
                                    success, message = system.use_free_pass(name, selected_date.strftime('%Y-%m-%d'))
                                    if success:
                                        st.success(message)
                                        st.rerun()
                                    else:
                                        st.error(message)
                            else:
                                st.warning("프리패스권 소진")
                else:
                    st.info(f"{selected_date.strftime('%Y-%m-%d')}에 지각/결석한 멤버가 없습니다.")
            else:
                st.warning(f"{selected_date.strftime('%Y-%m-%d')}에 출석 기록이 없습니다.")

        else:  # 프리패스권 사용 기록
            name = st.text_input("조회할 이름을 입력하세요")
            if st.button("조회"):
                if name:
                    total_practices = 0  # 또는 적절한 값으로 초기화
                    summary, error = system.get_free_pass_usage_summary(name=name)
                    if error:
                        st.error(error)
                    else:
                        st.subheader(f"{summary['이름']}님의 프리패스권 사용 기록")

                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**부서:** {summary['부서']}")
                            st.write(f"**사용한 프리패스권:** {summary['사용한_프리패스권']}회")
                            st.write(f"**잔여 프리패스권:** {summary['잔여_프리패스권']}회")

                        with col2:
                            # 사용 내역 테이블
                            if summary['사용_내역']:
                                st.write("**사용 내역:**")
                                usage_df = pd.DataFrame(summary['사용_내역'])
                                st.dataframe(usage_df)
                            else:
                                st.write("사용 내역이 없습니다.")
                else:
                    st.warning("이름을 입력해주세요.")

    if st.button("다음 출석 AI 예측"):
        st.info("랜덤포레스트: 최근 5회 출석/지각/결석 횟수 기반")
        results = predict_next_attendance(system.data_file)
        st.subheader("AI 모델별 다음 출석 확률 비교")
        st.dataframe(results)

def main():
    if len(sys.argv) > 1 and sys.argv[1] == "cli":
        cli_main()
    else:
        try:
            import streamlit.web.bootstrap
            streamlit_main()
        except ImportError:
            print("Streamlit이 설치되어 있지 않습니다. CLI 모드로 실행하려면 'python app.py cli'를 사용하세요.")

if __name__ == "__main__":
    main()